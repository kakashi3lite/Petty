AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Petty serverless stack

Globals:
  Function:
    Timeout: 15
    Runtime: python3.11

Resources:
  TimestreamDatabase:
    Type: AWS::Timestream::Database
    Properties: { DatabaseName: PettyDB }

  TimestreamTable:
    Type: AWS::Timestream::Table
    Properties:
      DatabaseName: !Ref TimestreamDatabase
      TableName: CollarMetrics
      RetentionProperties:
        MemoryStoreRetentionPeriodInHours: 24
        MagneticStoreRetentionPeriodInDays: 30

  FeedbackDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: petty-feedback-data

  DataProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: lambda.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: PettyDataProcessor
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - timestream:WriteRecords
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  DataProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/data_processor/
      Handler: app.lambda_handler
      Role: !GetAtt DataProcessorRole.Arn
      Environment:
        Variables:
          TIMESTREAM_DB: !Ref TimestreamDatabase
          TIMESTREAM_TABLE: !Ref TimestreamTable
      Events:
        Ingest:
          Type: HttpApi
          Properties:
            Path: /ingest
            Method: POST
        PetPlan:
          Type: HttpApi
          Properties:
            Path: /pet-plan
            Method: GET
        Realtime:
          Type: HttpApi
          Properties:
            Path: /realtime
            Method: GET

  BehavioralRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: lambda.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: PettyBehavioral
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - timestream:Select
                  - timestream:DescribeTable
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  TimelineGeneratorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/timeline_generator/
      Handler: app.lambda_handler
      Role: !GetAtt BehavioralRole.Arn
      Environment:
        Variables:
          TIMESTREAM_DB: !Ref TimestreamDatabase
          TIMESTREAM_TABLE: !Ref TimestreamTable
      Events:
        Timeline:
          Type: HttpApi
          Properties:
            Path: /pet-timeline
            Method: GET

  FeedbackHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/feedback_handler/
      Handler: app.lambda_handler
      Role: !GetAtt BehavioralRole.Arn
      Environment:
        Variables:
          FEEDBACK_BUCKET: !Ref FeedbackDataBucket
          TIMESTREAM_DB: !Ref TimestreamDatabase
          TIMESTREAM_TABLE: !Ref TimestreamTable
      Events:
        Feedback:
          Type: HttpApi
          Properties:
            Path: /submit-feedback
            Method: POST

  # SNS Topic for Alarm Notifications
  AlarmNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: PettyAlarmNotifications
      DisplayName: Petty System Alarms

  # IAM Role for Alarm Mitigation Function
  AlarmMitigationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: lambda.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AlarmMitigation
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - lambda:UpdateFunctionConfiguration
                  - lambda:GetFunctionConfiguration
                Resource: "*"
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !Ref MitigationStepFunction
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                  - ssm:GetParameter
                Resource: "*"

  # Lambda Function for Alarm Mitigation
  AlarmMitigationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/alarm_mitigator/
      Handler: app.lambda_handler
      Role: !GetAtt AlarmMitigationRole.Arn
      Environment:
        Variables:
          STEP_FUNCTION_ARN: !Ref MitigationStepFunction
          SAFE_MODE_PARAMETER: /petty/safe-mode
      Events:
        AlarmNotification:
          Type: SNS
          Properties:
            Topic: !Ref AlarmNotificationTopic

  # IAM Role for GitHub Issue Creator Function
  GitHubIssueRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: lambda.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: GitHubIssueCreation
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:DescribeAlarms
                Resource: "*"

  # Lambda Function for GitHub Issue Creation
  GitHubIssueFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/github_issue_creator/
      Handler: app.lambda_handler
      Role: !GetAtt GitHubIssueRole.Arn
      Environment:
        Variables:
          GITHUB_TOKEN_PARAMETER: /petty/github-token
          GITHUB_REPO: kakashi3lite/Petty

  # IAM Role for Step Functions
  StepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: states.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: 
                  - !GetAtt GitHubIssueFunction.Arn
                  - !GetAtt DataProcessorFunction.Arn
                  - !GetAtt TimelineGeneratorFunction.Arn
                  - !GetAtt FeedbackHandlerFunction.Arn

  # Step Functions State Machine for Mitigation Orchestration
  MitigationStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: PettyMitigationOrchestrator
      RoleArn: !GetAtt StepFunctionRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "Petty Alarm Mitigation Orchestrator",
          "StartAt": "ParseAlarm",
          "States": {
            "ParseAlarm": {
              "Type": "Pass",
              "Parameters": {
                "alarmName.$": "$.AlarmName",
                "newStateValue.$": "$.NewStateValue",
                "reason.$": "$.NewStateReason",
                "timestamp.$": "$.StateChangeTime"
              },
              "Next": "DetermineSafeMode"
            },
            "DetermineSafeMode": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.alarmName",
                  "StringMatches": "*Critical*",
                  "Next": "SetCriticalMode"
                },
                {
                  "Variable": "$.alarmName", 
                  "StringMatches": "*Emergency*",
                  "Next": "SetEmergencyMode"
                }
              ],
              "Default": "SetElevatedMode"
            },
            "SetElevatedMode": {
              "Type": "Pass",
              "Parameters": {
                "safeMode": "elevated"
              },
              "Next": "CreateGitHubIssue"
            },
            "SetCriticalMode": {
              "Type": "Pass", 
              "Parameters": {
                "safeMode": "critical"
              },
              "Next": "CreateGitHubIssue"
            },
            "SetEmergencyMode": {
              "Type": "Pass",
              "Parameters": {
                "safeMode": "emergency"
              },
              "Next": "CreateGitHubIssue"
            },
            "CreateGitHubIssue": {
              "Type": "Task",
              "Resource": "${GitHubIssueFunction.Arn}",
              "Parameters": {
                "alarmData.$": "$",
                "safeMode.$": "$.safeMode"
              },
              "End": true,
              "Retry": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 3,
                  "BackoffRate": 2.0
                }
              ]
            }
          }
        }

  # CloudWatch Alarms
  APIGatewayErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: Petty-API-Gateway-High-Error-Rate
      AlarmDescription: High error rate detected in API Gateway
      MetricName: 4XXError
      Namespace: AWS/ApiGatewayV2
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AlarmNotificationTopic
      TreatMissingData: notBreaching

  LambdaErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: Petty-Lambda-High-Error-Rate
      AlarmDescription: High error rate detected in Lambda functions
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AlarmNotificationTopic
      TreatMissingData: notBreaching

  LambdaDurationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: Petty-Lambda-High-Duration
      AlarmDescription: High duration detected in Lambda functions
      MetricName: Duration
      Namespace: AWS/Lambda
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10000
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AlarmNotificationTopic
      TreatMissingData: notBreaching

  LambdaThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: Petty-Lambda-Critical-Throttles
      AlarmDescription: Lambda function throttling detected
      MetricName: Throttles
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref AlarmNotificationTopic
      TreatMissingData: notBreaching
