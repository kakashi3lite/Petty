# Docker Compose for Petty AI Pet Monitoring System
# Production-ready configuration with security and observability

version: '3.8'

services:
  #----------------------------------------------------------------------------
  # Main Application Services
  #----------------------------------------------------------------------------
  
  petty-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-$(git rev-parse HEAD)}
        VERSION: ${VERSION:-dev}
    image: petty/api:${VERSION:-latest}
    container_name: petty-api
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - JWT_ALGORITHM=RS256
      - JWT_ISSUER=petty-api
      - JWT_AUDIENCE=petty-users
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://petty:${POSTGRES_PASSWORD:-petty123}@postgres:5432/petty
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - petty-network
    volumes:
      - ./logs:/app/logs:rw
      - ./data:/app/data:rw
    healthcheck:
      test: ["CMD", "python3", "/app/healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.petty-api.rule=Host(`api.petty.local`)"
      - "traefik.http.services.petty-api.loadbalancer.server.port=8080"

  #----------------------------------------------------------------------------
  # Infrastructure Services
  #----------------------------------------------------------------------------

  redis:
    image: redis:7.2-alpine
    container_name: petty-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis123}
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-redis123}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - petty-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true

  postgres:
    image: postgres:15-alpine
    container_name: petty-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=petty
      - POSTGRES_USER=petty
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-petty123}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./infrastructure/postgres/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - petty-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U petty -d petty"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true

  #----------------------------------------------------------------------------
  # Monitoring & Observability
  #----------------------------------------------------------------------------

  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: petty-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - petty-network
    security_opt:
      - no-new-privileges:true

  grafana:
    image: grafana/grafana:10.1.0
    container_name: petty-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - petty-network
    depends_on:
      - prometheus
    security_opt:
      - no-new-privileges:true

  jaeger:
    image: jaegertracing/all-in-one:1.48
    container_name: petty-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - petty-network
    security_opt:
      - no-new-privileges:true

  #----------------------------------------------------------------------------
  # Security & Scanning
  #----------------------------------------------------------------------------

  security-scanner:
    build:
      context: .
      dockerfile: Dockerfile
      target: security-scanner
    image: petty/security-scanner:${VERSION:-latest}
    container_name: petty-security-scanner
    volumes:
      - ./security-reports:/security-output
    networks:
      - petty-network
    profiles:
      - security

  #----------------------------------------------------------------------------
  # Load Balancer & Reverse Proxy
  #----------------------------------------------------------------------------

  traefik:
    image: traefik:v3.0
    container_name: petty-traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Dashboard
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/tls:/tls:ro
    networks:
      - petty-network
    security_opt:
      - no-new-privileges:true
    profiles:
      - production

#------------------------------------------------------------------------------
# Development Services
#------------------------------------------------------------------------------

  petty-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    image: petty/dev:${VERSION:-latest}
    container_name: petty-dev
    volumes:
      - .:/app
      - dev-venv:/app/.venv
    ports:
      - "8081:8080"
      - "8888:8888"  # Jupyter
    environment:
      - ENVIRONMENT=development
      - PYTHONPATH=/app/src
    networks:
      - petty-network
    profiles:
      - development
    command: ["python3", "-m", "pytest", "--watch"]

#------------------------------------------------------------------------------
# Networks & Volumes
#------------------------------------------------------------------------------

networks:
  petty-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  dev-venv:
    driver: local

#------------------------------------------------------------------------------
# Configuration Files
#------------------------------------------------------------------------------